{"version":3,"sources":["../../../projects/ngx-barcodejs/src/lib/ngx-barcode-js/ngx-barcode/ngx-barcode.component.ts","../../../projects/ngx-barcodejs/src/lib/ngx-barcode-js/ngx-barcode-js.module.ts"],"names":["NgxBarcodeComponent","elementRef","renderer","this","barcodeValue","font","nativeElement","style","display","classList","add","Object","defineProperty","prototype","ngOnChanges","changes","_initBarcode","svgElement","createElement","jsBarcode","options","_clearBarcode","appendChild","layoutElement","childCount","childNodes","length","child","nodeName","toLowerCase","remove","Component","args","selector","template","ElementRef","Renderer2","Input","NgModule","declarations","imports","CommonModule","exports"],"mappings":"8tBAwBE,SAAAA,EACUC,EACAC,GADAC,KAAAF,WAAAA,EACAE,KAAAD,SAAAA,EAXDC,KAAAC,aAAuB,GACvBD,KAAAE,KAAO,YAYdF,KAAKF,WAAWK,cAAcC,MAAMC,QAAU,eAC9CL,KAAKF,WAAWK,cAAcG,UAAUC,IAAI,sBAX9CC,OAAAC,eAAWZ,EAAAa,UAAA,UAAO,KAAlB,WACE,MAAO,CACLR,KAAMF,KAAKE,uCAYRL,EAAAa,UAAAC,YAAA,SAAYC,GACjBZ,KAAKa,gBAGChB,EAAAa,UAAAG,aAAA,WACN,GAAKb,KAAKC,aAAV,CAIA,IAAMa,EAAsBd,KAAKD,SAASgB,cAAc,MAAO,OAC/DC,EAAUF,EAAYd,KAAKC,aAAcD,KAAKiB,SAE9CjB,KAAKkB,gBACLlB,KAAKD,SAASoB,YAAYnB,KAAKF,WAAWK,cAAeW,KAGnDjB,EAAAa,UAAAQ,cAAA,WAIN,IAHA,IAAME,EAA6BpB,KAAKF,WAAWK,cAC/CkB,EAAaD,EAAcE,WAAWC,OAEnCF,KAAc,CACnB,IAAMG,EAAQJ,EAAcE,WAAWD,GAGF,QAAjCG,EAAMC,SAASC,eACjBF,EAAMG,oCA/CbC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,cACVC,SAAU,yEAVVC,EAAAA,kBAGAC,EAAAA,mDAUCC,EAAAA,oBACAA,EAAAA,eCPH,iCALCC,EAAAA,SAAQN,KAAA,CAAC,CACRO,aAAc,CAACvC,GACfwC,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC1C","sourcesContent":["import {\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\nimport * as jsBarcode from 'jsbarcode';\n\n@Component({\n  selector: 'ngx-barcode',\n  template: '<ng-content></ng-content>',\n})\nexport class NgxBarcodeComponent implements OnChanges {\n  @Input() barcodeValue: string = '';\n  @Input() font = 'Open Sans';\n\n  public get options(): Record<string, string | number> {\n    return {\n      font: this.font,\n    };\n  }\n\n  constructor(\n    private elementRef: ElementRef<HTMLElement>,\n    private renderer: Renderer2\n  ) {\n    this.elementRef.nativeElement.style.display = 'inline-block';\n    this.elementRef.nativeElement.classList.add('ngx-barcode');\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    this._initBarcode();\n  }\n\n  private _initBarcode() {\n    if (!this.barcodeValue) {\n      return;\n    }\n\n    const svgElement: Element = this.renderer.createElement('svg', 'svg');\n    jsBarcode(svgElement, this.barcodeValue, this.options);\n\n    this._clearBarcode();\n    this.renderer.appendChild(this.elementRef.nativeElement, svgElement);\n  }\n\n  private _clearBarcode(): void {\n    const layoutElement: HTMLElement = this.elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // We remove all svg elements in order to remove any old barcode svg.\n      if (child.nodeName.toLowerCase() === 'svg') {\n        child.remove();\n      }\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxBarcodeComponent } from './ngx-barcode/ngx-barcode.component';\n\n@NgModule({\n  declarations: [NgxBarcodeComponent],\n  imports: [CommonModule],\n  exports: [NgxBarcodeComponent],\n})\nexport class NgxBarcodeJsModule {}\n"]}